import discord
import time
import psutil as ps

from discord.ext import commands

from core.bot import avatar
from data.colors import colors
from core.logger import logger

start_time = time.time()

ping_list = [
            {
                'ping': 0.00000000000000000,
                'emoji': 'üü©üî≥üî≥üî≥üî≥'
            },
            {
                'ping': 0.10000000000000000,
                'emoji': 'üüßüü©üî≥üî≥üî≥'
            },
            {
                'ping': 0.15000000000000000,
                'emoji': 'üü•üüßüü©üî≥üî≥'
            },
            {
                'ping': 0.20000000000000000,
                'emoji': 'üü•üü•üüßüü©üî≥'
            },
            {
                'ping': 0.25000000000000000,
                'emoji': 'üü•üü•üü•üüßüü©'
            },
            {
                'ping': 0.30000000000000000,
                'emoji': 'üü•üü•üü•üü•üüß'
            },
            {
                'ping': 0.35000000000000000,
                'emoji': 'üü•üü•üü•üü•üü•'
            }
]

def bytes2Human(number, typer = None): # Thanks Fsoky community
        # –ü—Ä–∏–º–µ—Ä –†–∞–±–æ—Ç—ã –≠—Ç–æ–π –§—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–∏—Å–µ–ª:
        # >> bytes2Human(10000)
        # >> '9.8K'
        # >> bytes2Human(100001221)
        # >> '95.4M'

        if typer == "system":
            symbols = ('K–ë', '–ú–ë', '–ì–ë', 'T–ë', '–ü–ë', '–≠–ë', '–ó–ë', '–ò–ë')  # –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –ö–∏–ª–æ–±–∞–π—Ç—ã, –ú–µ–≥–∞–±–∞–π—Ç—ã, –ì–∏–≥–æ–±–∞–π—Ç—ã, –¢–µ—Ä—Ä–∞–±–∞–π—Ç—ã, –ü–µ—Ç–∞–±–∞–π—Ç—ã, –ü–µ—Ç–∞–±–∞–π—Ç—ã, –≠–∫—Å–∞–±–∞–π—Ç—ã, –ó–µ—Ç—Ç–∞–±–∞–π—Ç—ã, –ô–æ—Ç—Ç–∞–±–∞–π—Ç—ã
        else:
            symbols = ('K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y')  # –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –æ–±—ã—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã (10k, 10MM)

        prefix = {}

        for i, s in enumerate(symbols):
            prefix[s] = 1 << (i + 1) * 10

        for s in reversed(symbols):
            if number >= prefix[s]:
                value = float(number) / prefix[s]
                return '%.1f%s' % (value, s)

        return f"{number}B"
class Resource(commands.Cog):
    """Shows system information about the bot"""

    def __init__(self, bot):
        self.bot = bot

    @commands.command(aliases = [
                                'resources', 'resource', 'bot_resources', 'bot_resource',
                                '–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å', '–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å–±–æ—Ç–∞', '–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å_–±–æ—Ç–∞', '—Ä–µ—Å—É—Ä—Å—ã–±–æ—Ç–∞', '—Ä–µ—Å—É—Ä—Å—ã_–±–æ—Ç–∞'])
    async def resource_analytics_command(self, ctx):
        mem = ps.virtual_memory()
        ping = self.bot.ws.latency

        for ping_one in ping_list:
            if ping <= ping_one["ping"]:
                ping_emoji = ping_one["emoji"]
                break

        time_up = time.time() - start_time
        days_up = round(time_up) // 86400
        time_up %= 86400
        hours_up = round(time_up) // 3600
        time_up %= 3600
        minutes_up = round(time_up) // 60
        time_up = round(time_up % 60)
        msg = f"**{days_up}** –¥–Ω. **{hours_up}** —á–∞—Å. **{minutes_up}** –º–∏–Ω. **{time_up}** —Å–µ–∫. –Ω–∞–∑–∞–¥ :alarm_clock: "

        emb = discord.Embed(title = '–ó–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞', color = colors['help'])
        emb.add_field(name = '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU', value = f'–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {ps.cpu_percent()}%', inline = True)
        emb.add_field(name = '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM', value = f'–î–æ—Å—Ç—É–ø–Ω–æ: {bytes2Human(mem.available, "system")}\n' f'–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {bytes2Human(mem.used, "system")} ({mem.percent}%)\n' f'–í—Å–µ–≥–æ: {bytes2Human(mem.total, "system")}', inline = True)
        emb.add_field(name = '–ü–∏–Ω–≥ –ë–æ—Ç–∞', value = f'–ü–∏–Ω–≥: {ping * 1000:.0f}ms\n'f'`{ping_emoji}`', inline = True)
        emb.add_field(name = '–ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è:', value = msg, inline = True)
        emb.set_footer(text = 'Aki ¬© 2021 –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã', icon_url = avatar(self.bot.user))
        await ctx.send(embed = emb)
        logger.info(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –±–æ—Ç–µ- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ctx.author} ({ctx.author.id}).')

def setup(bot):
    bot.add_cog(Resource(bot))